{"remainingRequest":"/Users/kierangillen/code/palette/node_modules/docz-core/node_modules/babel-loader/lib/index.js?{\"presets\":[\"@babel/typescript\",\"@babel/react\",[\"@babel/env\",{\"targets\":{\"browsers\":[\"last 2 versions\"]}}],[\"/Users/kierangillen/code/palette/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":false,\"typescript\":true,\"parseProps\":false}]],\"plugins\":[\"@babel/plugin-proposal-class-properties\",[\"module-resolver\",{\"extensions\":[\".ts\",\".tsx\"],\"root\":[\"./src\"]}],[\"/Users/kierangillen/code/palette/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/kierangillen/code/palette/node_modules/react-hot-loader/babel.js\"],\"cacheDirectory\":true,\"babelrc\":false}!/Users/kierangillen/code/palette/node_modules/react-docgen-typescript-loader/dist/index.js!/Users/kierangillen/code/palette/src/elements/Typography/determineFontSizes.ts","dependencies":[{"path":"/Users/kierangillen/code/palette/src/elements/Typography/determineFontSizes.ts","mtime":1550251031223},{"path":"/Users/kierangillen/code/palette/node_modules/cache-loader/dist/cjs.js","mtime":1550251304255},{"path":"/Users/kierangillen/code/palette/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1550251304217},{"path":"/Users/kierangillen/code/palette/node_modules/react-docgen-typescript-loader/dist/index.js","mtime":1550251304506}],"contextDependencies":[],"result":["(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nimport { themeProps } from \"../../Theme\";\n\n/**\n * Determines which font sizes/line heights to use for typography.\n */\nexport function determineFontSizes(fontType, size) {\n  if (!Array.isArray(size)) {\n    var match = themeProps.typeSizes[fontType][size];\n    return {\n      fontSize: \"\".concat(match.fontSize, \"px\"),\n      lineHeight: \"\".concat(match.lineHeight, \"px\")\n    };\n  }\n\n  return size.map(function (s) {\n    return themeProps.typeSizes[fontType][s];\n  }).reduce(function (accumulator, current) {\n    return {\n      fontSize: _toConsumableArray(accumulator.fontSize).concat([\"\".concat(current.fontSize, \"px\")]),\n      lineHeight: _toConsumableArray(accumulator.lineHeight).concat([\"\".concat(current.lineHeight, \"px\")])\n    };\n  }, {\n    fontSize: [],\n    lineHeight: []\n  });\n}\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(determineFontSizes, \"determineFontSizes\", \"/Users/kierangillen/code/palette/src/elements/Typography/determineFontSizes.ts\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/kierangillen/code/palette/src/elements/Typography/determineFontSizes.ts"],"names":["themeProps","determineFontSizes","fontType","size","Array","isArray","match","typeSizes","fontSize","lineHeight","map","s","reduce","accumulator","current"],"mappings":";;;;;;;;;;;;;;AAAA,SAASA,UAAT;;AAGA;;;AAGA,OAAO,SAASC,kBAAT,CACLC,QADK,EAELC,IAFK,EAGL;AACA,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,IAAd,CAAL,EAA0B;AACxB,QAAMG,KAAK,GAAGN,UAAU,CAACO,SAAX,CAAqBL,QAArB,EAA+BC,IAA/B,CAAd;AACA,WAAO;AACLK,MAAAA,QAAQ,YAAKF,KAAK,CAACE,QAAX,OADH;AAELC,MAAAA,UAAU,YAAKH,KAAK,CAACG,UAAX;AAFL,KAAP;AAID;;AAED,SAAON,IAAI,CAACO,GAAL,CAAS,UAAAC,CAAC;AAAA,WAAIX,UAAU,CAACO,SAAX,CAAqBL,QAArB,EAA+BS,CAA/B,CAAJ;AAAA,GAAV,EAAiDC,MAAjD,CACL,UAACC,WAAD,EAAcC,OAAd,EAA0B;AACxB,WAAO;AACLN,MAAAA,QAAQ,qBAAMK,WAAW,CAACL,QAAlB,oBAA+BM,OAAO,CAACN,QAAvC,SADH;AAELC,MAAAA,UAAU,qBAAMI,WAAW,CAACJ,UAAlB,oBAAiCK,OAAO,CAACL,UAAzC;AAFL,KAAP;AAID,GANI,EAOL;AAAED,IAAAA,QAAQ,EAAE,EAAZ;AAAgBC,IAAAA,UAAU,EAAE;AAA5B,GAPK,CAAP;AASD;;;;;;;;;;;;0BArBeR,kB","sourcesContent":["import { themeProps } from \"../../Theme\"\nimport { FontFamily } from \"./Typography\"\n\n/**\n * Determines which font sizes/line heights to use for typography.\n */\nexport function determineFontSizes(\n  fontType: keyof FontFamily,\n  size: string | string[]\n) {\n  if (!Array.isArray(size)) {\n    const match = themeProps.typeSizes[fontType][size]\n    return {\n      fontSize: `${match.fontSize}px`,\n      lineHeight: `${match.lineHeight}px`,\n    }\n  }\n\n  return size.map(s => themeProps.typeSizes[fontType][s]).reduce(\n    (accumulator, current) => {\n      return {\n        fontSize: [...accumulator.fontSize, `${current.fontSize}px`],\n        lineHeight: [...accumulator.lineHeight, `${current.lineHeight}px`],\n      }\n    },\n    { fontSize: [], lineHeight: [] }\n  )\n}\n"]}]}